name: Validate Widget

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Validate JSON files
      run: |
        echo "Validating fields.json..."
        node -e "
          const fs = require('fs');
          try {
            const fields = JSON.parse(fs.readFileSync('fields.json', 'utf8'));
            console.log('‚úÖ fields.json is valid JSON');
            console.log('Found', fields.length, 'configuration fields');
          } catch (error) {
            console.error('‚ùå fields.json validation failed:', error.message);
            process.exit(1);
          }
        "
        
    - name: Validate HTML structure
      run: |
        echo "Validating HTML structure..."
        node -e "
          const fs = require('fs');
          const html = fs.readFileSync('index.html', 'utf8');
          
          // Check for required elements
          const requiredElements = [
            'timer-display',
            'timer-title', 
            'session-box',
            'progress-bar'
          ];
          
          let valid = true;
          requiredElements.forEach(element => {
            if (!html.includes(element)) {
              console.error('‚ùå Missing required element:', element);
              valid = false;
            }
          });
          
          if (valid) {
            console.log('‚úÖ HTML structure validation passed');
          } else {
            process.exit(1);
          }
        "
        
    - name: Validate CSS syntax
      run: |
        echo "Checking CSS for basic syntax issues..."
        node -e "
          const fs = require('fs');
          const css = fs.readFileSync('style.css', 'utf8');
          
          // Basic CSS validation - check for unmatched braces
          const openBraces = (css.match(/{/g) || []).length;
          const closeBraces = (css.match(/}/g) || []).length;
          
          if (openBraces !== closeBraces) {
            console.error('‚ùå CSS syntax error: Unmatched braces');
            console.error('Open braces:', openBraces, 'Close braces:', closeBraces);
            process.exit(1);
          }
          
          console.log('‚úÖ CSS syntax validation passed');
        "
        
    - name: Validate JavaScript syntax
      run: |
        echo "Validating JavaScript syntax..."
        node -c script.js
        echo "‚úÖ JavaScript syntax validation passed"
        
    - name: Check for StreamElements API usage
      run: |
        echo "Checking StreamElements API integration..."
        node -e "
          const fs = require('fs');
          const js = fs.readFileSync('script.js', 'utf8');
          
          const requiredAPIs = [
            'SE_API',
            'onWidgetLoad',
            'onEventReceived'
          ];
          
          let valid = true;
          requiredAPIs.forEach(api => {
            if (!js.includes(api)) {
              console.error('‚ùå Missing StreamElements API:', api);
              valid = false;
            }
          });
          
          if (valid) {
            console.log('‚úÖ StreamElements API integration validated');
          } else {
            process.exit(1);
          }
        "
        
    - name: Check documentation completeness
      run: |
        echo "Checking documentation completeness..."
        node -e "
          const fs = require('fs');
          const readme = fs.readFileSync('README.md', 'utf8');
          
          const requiredSections = [
            '# Pomodoro Timer Widget',
            '## Features',
            '## Installation',
            '## Configuration',
            '## Usage'
          ];
          
          let valid = true;
          requiredSections.forEach(section => {
            if (!readme.includes(section)) {
              console.error('‚ùå Missing documentation section:', section);
              valid = false;
            }
          });
          
          if (valid) {
            console.log('‚úÖ Documentation completeness validated');
          } else {
            process.exit(1);
          }
        "
        
    - name: Validate widget completeness
      run: |
        echo "Final validation - checking all required files..."
        requiredFiles=(
          "index.html"
          "style.css" 
          "script.js"
          "fields.json"
          "README.md"
        )
        
        for file in "${requiredFiles[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ All required files present"
        echo "üéâ Widget validation completed successfully!"
